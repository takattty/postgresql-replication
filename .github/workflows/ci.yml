name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Compose
      run: |
        # version警告を削除
        sed -i '1d' docker-compose.yml
    
    - name: Start PostgreSQL replication environment
      run: |
        # .envファイルを作成
        cp .env.example .env
        
        # Docker Compose環境を起動
        docker compose up -d postgres-primary postgres-standby
        
        # ログ確認
        echo "=== Docker Compose Status ==="
        docker compose ps
        
        echo "=== Primary Logs ==="
        docker compose logs postgres-primary | tail -20
        
        echo "=== Standby Logs ==="
        docker compose logs postgres-standby | tail -20
        
        # サービスが完全に起動するまで待機
        echo "=== Waiting for services to be ready ==="
        sleep 30
        
        # ヘルスチェック
        echo "=== Final Status Check ==="
        docker compose ps
        
        # ポートテスト
        echo "=== Port Test ==="
        nc -zv localhost 5432 || echo "Port 5432 not accessible"
        nc -zv localhost 5433 || echo "Port 5433 not accessible"
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'
    
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/go/pkg/mod
          ~/.cache/go-build
        key: ${{ runner.os }}-go-${{ hashFiles('app/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Install dependencies
      run: |
        cd app
        go mod download
        go mod verify
    
    - name: Run tests with Docker environment
      run: |
        cd app
        go test -v -race -coverprofile=coverage.out ./...
      env:
        POSTGRES_DB: testdb
        POSTGRES_USER: postgres
        POSTGRES_PASSWORD: password
        POSTGRES_REPLICATION_USER: replicator
        POSTGRES_REPLICATION_PASSWORD: repl_password
        # CI環境ではlocalhostを使用
        POSTGRES_PRIMARY_HOST: localhost
        POSTGRES_PRIMARY_PORT: 5432
        POSTGRES_STANDBY_HOST: localhost
        POSTGRES_STANDBY_PORT: 5433
    
    - name: Run go vet
      run: |
        cd app
        go vet ./...
    
    - name: Test build
      run: |
        cd app
        go build -v ./cmd/...
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./app/coverage.out
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
    
    - name: Cleanup
      if: always()
      run: docker compose down

  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'
    
    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v6
      with:
        version: latest
        working-directory: app
        args: --timeout=5m

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'
    
    - name: Run gosec
      run: |
        curl -sfL https://raw.githubusercontent.com/securecodewarrior/gosec/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v2.18.2
        cd app
        $(go env GOPATH)/bin/gosec -fmt sarif -out gosec.sarif ./...
      continue-on-error: true
    
    - name: Upload gosec results
      if: always() && hashFiles('app/gosec.sarif') != ''
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: app/gosec.sarif